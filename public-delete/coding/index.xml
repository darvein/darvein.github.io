<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Darvein</title><link>https://www.darvein.net/coding/</link><description>Recent content on Darvein</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://www.darvein.net/coding/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://www.darvein.net/coding/00-coding_todos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.darvein.net/coding/00-coding_todos/</guid><description>Coding TODOS Board TODOs https://pytorch.org/tutorials/ https://www.tensorflow.org/tutorials https://www.tensorflow.org/guide Review blockchain roadmap or smthng https://python-course.eu/python-tutorial/ Book: Document Violent Python Read Django Documentation: https://docs.djangoproject.com/en/5.0/ Read Vuejs Documentation: https://vuejs.org/guide/introduction.html Django Book VueJS Book Automate the Boring Stuff with Python: Practical Programming for Total Beginners Tutorial Howtos: https://docs.python.org/3/howto/index.html Tutorial Library: https://docs.python.org/3/library/index.html Book: Python Crash Course, 2nd Edition: A Hands-On, Project-Based Introduction to Programming Book: Mastering python networking, Eric chau Read python documentation Redo Bash notes Bash: built-in commands, pipes, filters https://exercism.</description></item><item><title/><link>https://www.darvein.net/coding/bash/training/content/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.darvein.net/coding/bash/training/content/</guid><description>Bash Scripting Training Content Day 1 Linux basics Bash introduction Essential tools you need to know List of commands Day 2 Special variables $#, $0, $n, $$, $?, $!, $@/$* Arrays Programming Structures Essential tools you need to know - Part 2 sort, uniq, find, cut, awk, sed tr, xargs, which Day 3 Redirections stdin, stdout, stderr, tee, /dev/null, /dev/fd/0 /dev/stdin, /dev/tcp/host/port Functions Bash export functions Declare -fx foo Pipes Status and Exit codes 0 and 255 syscall responder waitpid Error management and debugging -eux, trap, echos &amp;ndash;debugger (bashdb) Day ?</description></item><item><title/><link>https://www.darvein.net/coding/bash/training/day1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.darvein.net/coding/bash/training/day1/</guid><description>Bash training - Day 1 Linux basics Quick and simple intro to GNU/Linux.
Directories and files on Linux What type of files exist on Linux?
Symbol Meaning - Regular file d Directory l Link c Special file s Socket p Named pipe b Block device Linux filesystem:
Comparing two directories:
$ diff -q a b Files a/1.txt and b/1.txt differ Only in b: 3.txt Only in b: 4.txt Only in b: 5.</description></item><item><title/><link>https://www.darvein.net/coding/bash/training/day2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.darvein.net/coding/bash/training/day2/</guid><description>Bash training - Day 2 Bash variables and programming structures Variables Basic variables definition:
$ cat 01.sh #!/bin/bash name=&amp;#34;Lobo López&amp;#34; echo &amp;#34;Hello ${name}&amp;#34; echo -e &amp;#34;\e[1;31mbye bye&amp;#34; $ ./01.sh Hello Lobo López bye bye Defaulting parameters:
$ cat 01.sh #!/bin/bash domain=&amp;#34;${1:-industrialmurillo.edu.bo}&amp;#34; echo &amp;#34;Checking ${domain}&amp;#34; dig +short ns $domain \ | xargs -I {} dig +short axfr &amp;#34;${domain}&amp;#34; &amp;#34;@{}&amp;#34; $ ./01.sh aeumsa.edu.bo Checking aeumsa.edu.bo serv1.aeumsa.edu.bo. root.aeumsa.edu.bo. 113411 604800 86400 2419200 604800 serv1.</description></item><item><title/><link>https://www.darvein.net/coding/bash/training/day3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.darvein.net/coding/bash/training/day3/</guid><description>Bash training - Day 3 Redirections stdin, stdout, stderr, tee, /dev/null, /dev/fd/0 /dev/stdin, /dev/tcp/host/port Standard intput/output
$ file /dev/stdin /dev/stdin: symbolic link to /proc/self/fd/0 $ file /dev/stdout /dev/stdout: symbolic link to /proc/self/fd/1 $ file /dev/stderr /dev/stderr: symbolic link to /proc/self/fd/2 Special files being used for pipeping
$ ls -ltra /proc/self/fd/0 lrwx------ 1 ubuntu ubuntu 64 Oct 13 20:54 /proc/self/fd/0 -&amp;gt; /dev/pts/0 $ ls -ltra /dev/pts/0 crw--w---- 1 ubuntu tty 136, 0 Oct 13 20:54 /dev/pts/0 Sending stdin and stdout to a file</description></item><item><title/><link>https://www.darvein.net/coding/blockchain/blockchain-roadmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.darvein.net/coding/blockchain/blockchain-roadmap/</guid><description>Roadmap blockchain Concepts 1st generation: send/receive only bitcoin 2nd generation: add conditions to accept or deny (contracts) ethereum 3rd generation: scalability and interoperatilibity cardano &amp;amp; polkadot DeFi: protocols: MarkerDAO, Aave, Compound (Ethereum) Cardano, Binance Smart Chain, Cosmos, Avalance, Polkadot Dapps DAOs Frameworks Solidity Algorand waveportal https://github.com/gavinmgrant/waveportal Platforms Ethereum Polygon Cardano Corda Solana EOSIO Quorum Fantom (for smart contracts) Hyperledger Fabric Hyperledger Sawtooth Binance Tools REMIX web3 development https://www.alchemy.com/ get free matic token (polygon) https://faucet.</description></item><item><title/><link>https://www.darvein.net/coding/datascience/airflow/basics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.darvein.net/coding/datascience/airflow/basics/</guid><description>Airflow basics Introduction Example of the DAG dashboard
DAG Creation A DAG (Directed acyclic graph) is a set of tasks connected between them, it has a start and an end.
Example: Create table -&amp;gt; Is API Available -&amp;gt; Extract data -&amp;gt; Store user -&amp;gt; process user
Skeleton example:
airflow.cfg airflow.db dags/ logs/ unitests.cfg webserver_config.py Sample of a DAG user_processing.py
from airflow.models import DAG from datetime import datetime from airflow.providers.sqlite.operators.sqlite import SqliteOperator default_args = { &amp;#39;start_date&amp;#39;: datetime(2020, 1, 1) } with DAG(&amp;#39;user_processing&amp;#39;, schedule_interval=&amp;#39;@daily&amp;#39;, default_args=default_args, catchup=False) as dag: create_table = SqliteOpreator( task_id=&amp;#39;creating_table&amp;#39;, sqlite_conn_id=&amp;#39;db_sqlite&amp;#39;, sql=&amp;#39;&amp;#39;&amp;#39; CREATE TABLE users ( firstname TEXT NOT NULL, lastname TEXT NOT NULL, country TEXT NOT NULL, username TEXT NOT NULL, password TEXT NOT NULL, email TEXT NOT NULL PRIMARY KEY ); &amp;#39;&amp;#39;&amp;#39; ) Then start the airflow webserver: airflow webserver and also airflow scheduler</description></item><item><title/><link>https://www.darvein.net/coding/datascience/datasience-basis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.darvein.net/coding/datascience/datasience-basis/</guid><description>Datascience basis Intro Data VS Big Data!!! &amp;mdash;&amp;gt; Se trata de las mismas ideas y objetivos aplicadas a 2 situaciones:
cuando el volumen, la velocidad, la variedad, la veracidad/confiabilidad, y el valor del corpus de datos en uso son manejables dentro de los parámetros básicos en cuanto a infraestructura lógica y técnicas de procesamiento cuando el volumen, la velocidad, la variedad, la veracidad/confiabilidad, y el valor del corpus de datos en uso son tales (en un caso o en los cinco) que hacen necesario el despliegue, operaciones y procesamiento en un ecosistema distribuido Steps: En la práctica estos pasos no son lineales e incrementales, sino q pueden ser iterativos o simultáneos &amp;hellip;como puede verse, los pasos 1 y 2 corresponden a lo q normalmente se entiende como Data Engineering, en tanto q los pasos 3 al 6 son más bien lo q corresponde al Data Scientist como tal.</description></item><item><title/><link>https://www.darvein.net/coding/deeplearning/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.darvein.net/coding/deeplearning/</guid><description>Deep learning notes Deep Learning is a subset of Machine Learning and this one is a subset of Artificial Intelligence.
Required Math:
Linear Algebra Calculus Probability and statistics Frameworks: Numpy, Pnadas, Matplotlib, tensorflow, Keras, pytorch, hugging Face
Keys:
Data Preprocessing: data cleaning, normalization ML algos: linear regression, decision trees, random forest, SVM, K-NN Evaluaction metrics: Accuracy, precision, Recall, F1 Score Deeplearning: neural networks. CNNs, RNNs, GANs, Transformers NPL: text mining, sentiment analysis Reinforcement learning: q-learning, policy gradients &amp;#x2015; ML vs DL &amp;#x2015; LLMs: GPT (openai), BERT (google), Roberta (facebook)</description></item><item><title/><link>https://www.darvein.net/coding/python/python-tutorial/python-tutorial/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.darvein.net/coding/python/python-tutorial/python-tutorial/</guid><description>Python Tutorial Resource: https://docs.python.org/3/tutorial/index.html Overview At first glance this teaches about:
Basics: variables, operators and data types. Math, numbers, strings and lists Flow structures: if, for, while loops. break/continue Functions Data structures: lists, dicts, sets, tuples Modules, Packages and Classes Most popular libs: math, random, datetime, statistics, Exceptions: try, except, finally Others: List comprehension, function decorators An Informal Introduction to Python Simplier math operations, variables definition and strings manipulation. Also a little bit of lists.</description></item><item><title/><link>https://www.darvein.net/coding/python/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.darvein.net/coding/python/readme/</guid><description> Python notes index Resource: https://docs.python.org/3/tutorial/index.html</description></item><item><title/><link>https://www.darvein.net/coding/pytorch/pytorch-tutorials/00-basics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.darvein.net/coding/pytorch/pytorch-tutorials/00-basics/</guid><description>Basics Here my notes on my processes of learning Pytorch from Pytorch official tutorials.
URL: https://pytorch.org/tutorials/beginner/basics/quickstart_tutorial.html Ok, this page says I will become a ninja ML killer developer. &amp;#x1f977;
It will teach the whole ML Workflow development:
Working with data Creating models Optimizing model parameters Saving and deploying trained models We will use FashionMNIST data set becase we like clothes and we are cool &amp;#x1f455;
Pre-reqs We first need to create an isolated python environment, conda can help here:</description></item><item><title/><link>https://www.darvein.net/coding/pytorch/pytorch-tutorials/01-quickstart/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.darvein.net/coding/pytorch/pytorch-tutorials/01-quickstart/</guid><description>Quickstart Setup the model We basically start getting the training and test data from FashionMNIST which is one of the many available vision datasets for pytorch.
(dev) ~z➤ python 01.py Shape of X [N, C, H, W]: torch.Size([64, 1, 28, 28]) Shape of y: torch.Size([64]) torch.int64 Then we create the model. Here we basically we use a lot nn.Module lib, it helps creating the NeuralNetwork and other parameters for itself.</description></item><item><title/><link>https://www.darvein.net/coding/pytorch/pytorch-tutorials/02-tensors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.darvein.net/coding/pytorch/pytorch-tutorials/02-tensors/</guid><description>Tensors A tensor is a data structure, a multi-dimensional array. Used to store data for input and output to a given model. It can be created by Numpy or like on this case with PyTorch.
Tensor Properties:
Data type Shape Dimension/Rank Size Mutability Tensor operations Over 100 tensor operations, including arithmetic, linear algebra, matrix manipulation (transposing, indexing, slicing), sampling</description></item><item><title/><link>https://www.darvein.net/coding/pytorch/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.darvein.net/coding/pytorch/readme/</guid><description> Pytorch Learning Notes Labs First: Setup your local environment:
virtualenv venv . venv/bin/activate pip install -r requirements.txt Models Train a model:
Pre: Prep your data Setup pytorch env locally Define a simple neural network Load data Define Loss Function and Optimizer Train data in a loop Evaluate the model Save the Model &amp;#x1f4be; Visualize? Deploy?</description></item><item><title/><link>https://www.darvein.net/coding/solidity/solidity/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.darvein.net/coding/solidity/solidity/</guid><description>Solidity notes remix: https://remix-ide.readthedocs.io/en/latest/ Coding license headers
pragma version
smart contract
state variables functions function modifiers events struct types / enum types Use cases? gaming and blockchain ethereum transactions over web3 nft voting system! multi-signature accounts? Tips / Best practices small uints in structs saves gas! clustered variables (next to each other) saves gas! view and pure doesn&amp;rsquo;t cost gas if called internally/privately Resources Solidity &amp;amp; Ethereum in React (Next JS): The Complete Guide : https://www.</description></item></channel></rss>